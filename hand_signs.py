# -*- coding: utf-8 -*-
"""Hand signs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j2vgXEadAIpy-jbSZUNmHxjnoE_5mppT
"""

img_cus = tf.image.rgb_to_grayscale(test_image)
img_final = np.expand_dims(np.array(img_cus),axis=3)

!pip install kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle 
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d datamunge/sign-language-mnist

!unzip sign-language-mnist.zip

!ls

import pandas as pd
import numpy as np

df = pd.read_csv('/content/sign_mnist_train.csv')

df_test = pd.read_csv('/content/sign_mnist_test.csv')

df_test.shape

df.head()

labels = df['label'].values
test_label = df_test['label'].values

pixel = df.drop('label',axis=1).values
test_pixel = df_test.drop('label',axis=1).values

count = 0
img = []
for data in pixel:
  ima = data.reshape(28,28)
  img.append(ima)

test_img = []
for data in test_pixel:
  ima = data.reshape(28,28)
  test_img.append(ima)

img_test_array = np.array(test_img).astype(float)

img_array = np.array(img).astype(float)

img_array.shape

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

training_img = np.expand_dims(img_array,axis=3)
testing_img = np.expand_dims(img_test_array,axis=3)

training_img.shape

train_imggen = ImageDataGenerator(rescale=1./255.,shear_range=0.2,zoom_range=0.2)
test_imggen = ImageDataGenerator(rescale=1./255.)

train_datagen = train_imggen.flow(training_img,labels,batch_size=50)
#test_datagen = test_imggen()

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(26, activation='softmax')
])

model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

history = model.fit_generator(
    train_datagen,
    epochs=10)

model.evaluate(testing_img,test_label)

from keras.models import load_model

model.save('sign_mnist.h5')